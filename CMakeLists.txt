CMAKE_MINIMUM_REQUIRED(VERSION 3.1.3)
PROJECT (GlyphBuilder)

message("CMAKE_VS_PLATFORM_NAME = ${CMAKE_VS_PLATFORM_NAME}")
message("CMAKE_CONFIGURATION_TYPES = ${CMAKE_CONFIGURATION_TYPES}")

SET(BUILD_SHARED_LIBS ON) 

#Setup general platform specific values 
IF (${WIN32})
	IF(${CMAKE_VS_PLATFORM_NAME} MATCHES Win32)
		SET(ARCH_DIR Win32)
	ELSE()
		SET(ARCH_DIR Win64)
	ENDIF()
	#Suppress warnings in Windows about using non-secure standard library functions
	add_definitions(-D_CRT_SECURE_NO_WARNINGS -DUNICODE)
	SET(GUI_TYPE WIN32)
ELSEIF (${APPLE})
	SET(ARCH_DIR OSX64)
	SET(GUI_TYPE MACOSX_BUNDLE)
ELSE()
	SET(ARCH_DIR Linux64)
ENDIF()

SET(DEVELOPMENT_TOP_DIR ${CMAKE_SOURCE_DIR}/..)
SET(THIRDPARTYDIR ${DEVELOPMENT_TOP_DIR}/3rdParty)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/lib/${ARCH_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/lib/${ARCH_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/bin/${ARCH_DIR})

LINK_DIRECTORIES(${THIRDPARTYDIR}/lib/${ARCH_DIR} ${DEVELOPMENT_TOP_DIR}/cmake/lib/${ARCH_DIR})

FIND_PACKAGE(OpenGL)

#Boost
IF (${WIN32})
	#set(Boost_NO_SYSTEM_PATHS    ON)
	SET(Boost_INCLUDE_DIRS ${THIRDPARTYDIR}/include/boost_1_55_0)
	SET(Boost_LIBRARIES debug boost_filesystem-vc120-mt-gd-1_55 debug boost_system-vc120-mt-gd-1_55 optimized boost_filesystem-vc120-mt-1_55 optimized boost_system-vc120-mt-1_55)
	SET(Boost_FOUND ON)
ELSE()
	set(Boost_USE_STATIC_LIBS       OFF) 
	set(Boost_USE_MULTITHREADED      ON)
	set(Boost_USE_STATIC_RUNTIME    OFF)
	FIND_PACKAGE(Boost 1.55 COMPONENTS filesystem system)
ENDIF()

#Qt5
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
IF (${WIN32})
	set(CMAKE_PREFIX_PATH "D:\\Qt32")
	set(CMAKE_LIBRARY_PATH "C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um\\x86")
ELSE()
	
ENDIF()
FIND_PACKAGE(Qt5Core)
FIND_PACKAGE(Qt5Gui)
FIND_PACKAGE(Qt5Widgets)
FIND_PACKAGE(Qt5OpenGL)
FIND_PACKAGE(Qt5Network)
FIND_PACKAGE(Qt5Sql)

SET(STLPLUS_INCLUDE_DIR ${THIRDPARTYDIR}/include/stlplus_3_11)
SET(GLM_INCLUDE_DIR ${THIRDPARTYDIR}/include/glm_0_9_6_3)

#Setup zSpace and licensing
#IF (${WIN32})
#	SET(ZSPACE_FOUND TRUE)
#ELSE()
	SET(ZSPACE_FOUND FALSE)
#ENDIF()

#IF (${WIN32})
#	SET(LICENSING_FOUND TRUE)
#ELSE()
	SET(LICENSING_FOUND FALSE)
#ENDIF()

#IF (${WIN32})
#	SET(BREAKPAD_FOUND TRUE)
#ELSE()
	SET(BREAKPAD_FOUND FALSE)
#ENDIF()

ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzBridge "${CMAKE_CURRENT_BINARY_DIR}/ANTzBridge")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzCore "${CMAKE_CURRENT_BINARY_DIR}/ANTzCore")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzGUI "${CMAKE_CURRENT_BINARY_DIR}/ANTzGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzSingleGlyphGUI "${CMAKE_CURRENT_BINARY_DIR}/ANTzSingleGlyphGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXDataMapping "${CMAKE_CURRENT_BINARY_DIR}/SGXDataMapping")
#ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXDataTransform "${CMAKE_CURRENT_BINARY_DIR}/SGXDataTransform")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXFoundation "${CMAKE_CURRENT_BINARY_DIR}/SGXFoundation")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXGeospatial "${CMAKE_CURRENT_BINARY_DIR}/SGXGeospatial")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXImage "${CMAKE_CURRENT_BINARY_DIR}/SGXImage")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXUtility "${CMAKE_CURRENT_BINARY_DIR}/SGXUtility")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/DataEngine/DataEngine "${CMAKE_CURRENT_BINARY_DIR}/DataEngine")
#ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/DataMapper "${CMAKE_CURRENT_BINARY_DIR}/DataMapper")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/GlyphDesigner "${CMAKE_CURRENT_BINARY_DIR}/GlyphDesigner")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/GlyphViewer "${CMAKE_CURRENT_BINARY_DIR}/GlyphViewer")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/MapDownloading "${CMAKE_CURRENT_BINARY_DIR}/MapDownloading")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXDataTransformGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXDataTransformGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXGlyphGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXGlyphGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXGUI")

IF (${ZSPACE_FOUND})
	ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXzSpaceGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXzSpaceGUI")
ENDIF()