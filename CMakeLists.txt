CMAKE_MINIMUM_REQUIRED(VERSION 3.1.3)
PROJECT (GlyphBuilder)

#message("CMAKE_VS_PLATFORM_NAME = ${CMAKE_VS_PLATFORM_NAME}")
#message("CMAKE_CONFIGURATION_TYPES = ${CMAKE_CONFIGURATION_TYPES}")

function (Set_Windows_Properties target)
	IF (${WIN32}) 
		set_target_properties(${target} PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:WINDOWS")
		set_target_properties(${target} PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")
	ENDIF()
endfunction()

SET(CMAKE_CXX_STANDARD 11)
SET(BUILD_SHARED_LIBS ON) 

#Setup general platform specific values 
IF (${WIN32})
	IF(${CMAKE_VS_PLATFORM_NAME} MATCHES Win32)
		SET(ARCH_DIR Win32)
		#For 32 bit windows apps & libraries to be able to access 4GB of memory
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /LARGEADDRESSAWARE")
	ELSE()
		SET(ARCH_DIR Win64)
	ENDIF()
	#Suppress warnings in Windows about using non-secure standard library functions
	add_definitions(-D_CRT_SECURE_NO_WARNINGS -DUNICODE)
	#Suppress C4251 'needs to have dll-interface' warnings
	add_definitions( "/wd4251" )
	SET(GUI_TYPE WIN32)
ELSEIF (${APPLE})
	SET(ARCH_DIR OSX64)
	SET(GUI_TYPE MACOSX_BUNDLE)
	include_directories(/Developers/Headers/FlatCarbon)
ELSE()
	SET(ARCH_DIR Linux64)
ENDIF()

get_filename_component(DEVELOPMENT_TOP_DIR ${CMAKE_SOURCE_DIR}/.. ABSOLUTE)
SET(THIRDPARTYDIR ${DEVELOPMENT_TOP_DIR}/3rdParty)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/lib/${ARCH_DIR})
IF (${WIN32})
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/lib/${ARCH_DIR})
ELSE()
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/bin/${ARCH_DIR})
ENDIF()
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${DEVELOPMENT_TOP_DIR}/cmake/bin/${ARCH_DIR})

LINK_DIRECTORIES(${THIRDPARTYDIR}/lib/${ARCH_DIR} ${DEVELOPMENT_TOP_DIR}/cmake/lib/${ARCH_DIR})

FIND_PACKAGE(OpenGL)
if (OPENGL_FOUND)
	message("Found OpenGL!")
	message(STATUS "OpenGL Path: " ${OPENGL_gl_LIBRARY})
	message(STATUS "OpenGL Include: " ${OPENGL_INCLUDE_DIR}/Headers)
	include_directories(${OPENGL_INCLUDE_DIR}/Headers)
endif()

#Boost
IF (${WIN32})
	#set(Boost_NO_SYSTEM_PATHS    ON)
	SET(Boost_INCLUDE_DIRS ${THIRDPARTYDIR}/include/boost_1_55_0)
	SET(Boost_LIBRARIES debug boost_filesystem-vc120-mt-gd-1_55 debug boost_system-vc120-mt-gd-1_55 optimized boost_filesystem-vc120-mt-1_55 optimized boost_system-vc120-mt-1_55)
		SET(Boost_FOUND ON)
ELSE()
	SET(Boost_INCLUDE_DIRS ${THIRDPARTYDIR}/include/boost_1_60_0)
IF(${APPLE})
	SET(Boost_LIBRARIES libboost_filesystem.a libboost_system.a)
	SET(Boost_FOUND ON)
ELSE()
	SET(Boost_LIBRARIES libboost_filesystem.so libboost_system.so)
	SET(Boost_FOUND ON)
ENDIF()
	#set(Boost_USE_STATIC_LIBS       OFF) 
	#set(Boost_USE_MULTITHREADED      ON)
	#set(Boost_USE_STATIC_RUNTIME    OFF)
	#FIND_PACKAGE(Boost 1.55 COMPONENTS filesystem system)
ENDIF()

#Qt5
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
IF (${WIN32})
	set(CMAKE_PREFIX_PATH "C:\\Qt\\Qt5.6.0\\5.6.0\\msvc2012")
	set(CMAKE_LIBRARY_PATH "C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um\\x86")
ELSEIF(APPLE)
	set(CMAKE_PREFIX_PATH "/Users/Shared/Qt5.6.0/5.6/clang_64")
ELSE()
	set(CMAKE_PREFIX_PATH "${THIRDPARTYDIR}/Qt5.6.0/5.6/gcc_64")
ENDIF()
FIND_PACKAGE(Qt5Core)
FIND_PACKAGE(Qt5Gui)
FIND_PACKAGE(Qt5Widgets)
FIND_PACKAGE(Qt5OpenGL)
FIND_PACKAGE(Qt5Network)
FIND_PACKAGE(Qt5Sql)

SET(STLPLUS_INCLUDE_DIR ${THIRDPARTYDIR}/include/stlplus_3_11)
SET(GLM_INCLUDE_DIR ${THIRDPARTYDIR}/include/glm_0_9_6_3)

#Java
# Note we don't actually need to link against Java since we're loading it dynamically.
# (In fact on OSX linking against it can lead to JVM crashes if the OS has a different JVM
# installed from the one we want to use.)
SET(JAVA_INCLUDE_DIRS ${DEVELOPMENT_TOP_DIR}/DataEngine/jdk1.7.0_79/include)
IF (${WIN32})
	LIST(APPEND JAVA_INCLUDE_DIRS ${DEVELOPMENT_TOP_DIR}/DataEngine/jdk1.7.0_79/include/win32)
ELSEIF(${APPLE})
	LIST(APPEND JAVA_INCLUDE_DIRS ${DEVELOPMENT_TOP_DIR}/DataEngine/jdk1.7.0_79/include/darwin)
ELSE()
	LIST(APPEND JAVA_INCLUDE_DIRS ${DEVELOPMENT_TOP_DIR}/DataEngine/jdk1.7.0_79/include/linux)
ENDIF()

#Setup zSpace, licensing, and breakpad
#IF (${WIN32})
#	SET(ZSPACE_FOUND TRUE)
#ELSE()
	SET(ZSPACE_FOUND FALSE)
#ENDIF()

IF (${WIN32})
	SET(LICENSING_FOUND TRUE)
	SET(LICENSE_INCLUDE_DIR ${THIRDPARTYDIR}/include/rlm_ez_11_0)
	SET(LICENSE_LINK_DIR ${THIRDPARTYDIR}/tools/rlm_ez_11_0/${ARCH_DIR})
ELSEIF (${APPLE})
	SET(LICENSING_FOUND FALSE)
	SET(LICENSE_INCLUDE_DIR ${THIRDPARTYDIR}/include/rlm_ez_12_0)
	SET(LICENSE_LINK_DIR ${THIRDPARTYDIR}/tools/rlm_ez_12_0/${ARCH_DIR})
ELSE()
	SET(LICENSING_FOUND TRUE)
	SET(LICENSE_INCLUDE_DIR ${THIRDPARTYDIR}/include/rlm_ez_12_0)
	SET(LICENSE_LINK_DIR ${THIRDPARTYDIR}/tools/rlm_ez_12_0/${ARCH_DIR})
ENDIF()
IF (${LICENSING_FOUND})
	LINK_DIRECTORIES(${LICENSE_LINK_DIR})
ENDIF()

#IF (${WIN32})
#	SET(BREAKPAD_FOUND TRUE)
#ELSE()
	SET(BREAKPAD_FOUND FALSE)
#ENDIF()

#Libraries
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzBridge "${CMAKE_CURRENT_BINARY_DIR}/ANTzBridge")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzCore "${CMAKE_CURRENT_BINARY_DIR}/ANTzCore")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzGUI "${CMAKE_CURRENT_BINARY_DIR}/ANTzGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/ANTzPlus/ANTzSingleGlyphGUI "${CMAKE_CURRENT_BINARY_DIR}/ANTzSingleGlyphGUI")

ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXDataMapping "${CMAKE_CURRENT_BINARY_DIR}/SGXDataMapping")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXFoundation "${CMAKE_CURRENT_BINARY_DIR}/SGXFoundation")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXGeospatial "${CMAKE_CURRENT_BINARY_DIR}/SGXGeospatial")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXImage "${CMAKE_CURRENT_BINARY_DIR}/SGXImage")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/Core/SGXUtility "${CMAKE_CURRENT_BINARY_DIR}/SGXUtility")

ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/MapDownloading "${CMAKE_CURRENT_BINARY_DIR}/MapDownloading")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXDataTransformGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXDataTransformGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXGlyphGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXGlyphGUI")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXGUI")

ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/DataEngine/DataEngine "${CMAKE_CURRENT_BINARY_DIR}/DataEngine")
IF(${UNIX})
	IF(!APPLE)
		ADD_SUBDIRECTORY("${DEVELOPMENT_TOP_DIR}/DataEngine/Java DataEngine/converthash/HashInput" "${CMAKE_CURRENT_BINARY_DIR}/HashInput")
	ENDIF()
ENDIF()

IF (${ZSPACE_FOUND})
	ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/SGXzSpaceGUI "${CMAKE_CURRENT_BINARY_DIR}/SGXzSpaceGUI")
ENDIF()

#Executables
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/DataMapper "${CMAKE_CURRENT_BINARY_DIR}/DataMapper")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/GlyphDesigner "${CMAKE_CURRENT_BINARY_DIR}/GlyphDesigner")
ADD_SUBDIRECTORY(${DEVELOPMENT_TOP_DIR}/GUI/GlyphViewer "${CMAKE_CURRENT_BINARY_DIR}/GlyphViewer")
