#include "changedatasourcefiledialog.h"
#include <QtWidgets/QFormLayout>
#include <QtWidgets/QLabel>
#include <QtWidgets/QDialogButtonBox>
#include <QtWidgets/QMessageBox>
#include "sourcedatamanager.h"

ChangeDatasourceFileDialog::ChangeDatasourceFileDialog(const SynGlyphX::FileDatasource& oldDatasourceFile, const QString& acceptButtonText, QWidget *parent)
	: QDialog(parent),
	m_fileSourceType(oldDatasourceFile.GetType())
{
	QFormLayout* layout = new QFormLayout(this);

	QString oldDatasourceName = QString::fromStdWString(oldDatasourceFile.GetDBName());
	QLabel* oldDatasourceLabel = new QLabel(oldDatasourceName, this);
	layout->addRow(tr("Old Datasource:"), oldDatasourceLabel);
	m_newDatasourceFileLineEdit = new SynGlyphX::BrowseLineEdit(SynGlyphX::BrowseLineEdit::FileDialogType::FileOpen, true, this);
	m_newDatasourceFileLineEdit->SetInitalBrowseDirectory(oldDatasourceName);
	m_newDatasourceFileLineEdit->SetText(oldDatasourceName);
	layout->addRow(tr("New Datasource:"), m_newDatasourceFileLineEdit);

	QDialogButtonBox* dialogButtonBox = new QDialogButtonBox(QDialogButtonBox::Cancel, this);
	QPushButton* nextOkButton = dialogButtonBox->addButton(acceptButtonText, QDialogButtonBox::ButtonRole::AcceptRole);
	layout->addWidget(dialogButtonBox);
	QObject::connect(dialogButtonBox, &QDialogButtonBox::accepted, this, &ChangeDatasourceFileDialog::accept);
	QObject::connect(dialogButtonBox, &QDialogButtonBox::rejected, this, &ChangeDatasourceFileDialog::reject);

	setLayout(layout);

	setWindowTitle(tr("Change Datasource File"));

	if (oldDatasourceFile.CanDatasourceHaveMultipleTables()) {
	
		for (std::wstring table : oldDatasourceFile.GetTables()) {
		
			m_oldDatasourceTables.append(QString::fromStdWString(table));
		}
		m_oldDatasourceTables.sort();
	}
}

ChangeDatasourceFileDialog::~ChangeDatasourceFileDialog()
{

}

QString ChangeDatasourceFileDialog::GetNewDatasourceFile() const {

	return m_newDatasourceFileLineEdit->GetText();
}

void ChangeDatasourceFileDialog::accept() {

	if (ValidateNewDatasourceFile()) {

		QDialog::accept();
	}
	else {

		QMessageBox::warning(this, tr("Change Datasource"), tr("New datasource is not a valid replacement for old datasource."));
	}
}

bool ChangeDatasourceFileDialog::ValidateNewDatasourceFile() const {

	QString newDatasource = m_newDatasourceFileLineEdit->GetText();

	if (m_fileSourceType == SynGlyphX::FileDatasource::SourceType::SQLITE3) {

		if (SynGlyphX::SourceDataManager::IsSQLiteDB(newDatasource)) {

			QStringList tables = SynGlyphX::SourceDataManager::GetListOfTablesWithoutAutogeneratedTablesInDatabaseFile(newDatasource);
			tables.sort();
			return (m_oldDatasourceTables == tables);
		}
	}
	else if (m_fileSourceType == SynGlyphX::FileDatasource::SourceType::CSV) {
		
		if (newDatasource.right(4) == ".csv") {

			return true;
		}
	}

	return false;
}