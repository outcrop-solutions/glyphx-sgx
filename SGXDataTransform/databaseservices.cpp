#include "databaseservices.h"
#include <QtCore/QUuid>
#include <QtCore/QFile>
#include <QtCore/QFileInfo>
#include <QtCore/QVariant>
#include <exception>
#include <boost/uuid/uuid_io.hpp>
#include "datatransformmapping.h"
#include <QtSql/QSqlQuery>

namespace SynGlyphX {

	DatabaseServices::DatabaseServices()
	{
	}


	DatabaseServices::~DatabaseServices()
	{
	}

	bool DatabaseServices::IsSQLiteDB(const QString& filename) {

		const char* first16BytesOfSQLiteDB = "SQLite format 3";

		QFile file(filename);
		if (file.exists()) {

			if (file.open(QIODevice::ReadOnly)) {

				uchar* first16bytes = file.map(0, 16);
				file.close();

				return (memcmp(first16bytes, first16BytesOfSQLiteDB, 16) == 0);
			}
		}

		return false;
	}

	QString DatabaseServices::GetFormattedDBName(const QSqlDatabase& db) {

		QString databaseName = db.databaseName();

		if (db.driverName() == "QSQLITE") {
			QFileInfo fi(databaseName);
			return fi.baseName();
		}
		else {
			return databaseName;
		}
	}

	QString DatabaseServices::GetFormattedDBName(const boost::uuids::uuid& databaseID) {

		QSqlDatabase db = QSqlDatabase::database(QString::fromStdString(boost::uuids::to_string(databaseID)));
		return GetFormattedDBName(db);
	}

	QStringList DatabaseServices::GetListOfTablesWithoutAutogeneratedTables(const QSqlDatabase& db) {

		QStringList tableList = db.tables();

		if (db.driverName() == "QSQLITE") {

			tableList.removeAll("sqlite_sequence");
		}

		return tableList;
	}

	QStringList DatabaseServices::GetListOfTablesWithoutAutogeneratedTables(const QString& dbName, SynGlyphX::Datasource::SourceType sourceType) {

		QSqlDatabase newDataSourceDB = QSqlDatabase::addDatabase(GetQtDBType(sourceType), "TEMPDB");
		newDataSourceDB.setDatabaseName(dbName);

		QStringList tables = GetListOfTablesWithoutAutogeneratedTables(newDataSourceDB);

		QSqlDatabase::removeDatabase("TEMPDB");

		return tables;
	}

	QString DatabaseServices::GetQtDBType(SynGlyphX::Datasource::SourceType sourceType) {

		if (sourceType == SynGlyphX::Datasource::SQLITE3) {
			return "QSQLITE";
		}

		return "";
	}

	void DatabaseServices::AddDatabaseConnections(const DataTransformMapping::DatasourceMap& datasources, unsigned int numNewDatasources) {

		SynGlyphX::DataTransformMapping::DatasourceMap::const_iterator iT = datasources.begin();
		std::advance(iT, datasources.size() - numNewDatasources);
		for (; iT != datasources.end(); ++iT) {

			QSqlDatabase newDataSourceDB = QSqlDatabase::addDatabase(GetQtDBType(iT->second.GetType()), QString::fromStdString(boost::uuids::to_string(iT->first)));
			newDataSourceDB.setDatabaseName(QString::fromStdWString(iT->second.GetDBName()));
		}
	}

	QVariantList DatabaseServices::RunSqlQuery(const InputField& inputfield) {

		QVariantList results;
		QSqlDatabase db = QSqlDatabase::database(QString::fromStdWString(boost::uuids::to_wstring(inputfield.GetDatasourceID())));

		QSqlQuery query(db);
		query.prepare(QString("SELECT %1 FROM ").arg("\"" + QString::fromStdWString(inputfield.GetField()) + "\"") + QString::fromStdWString(inputfield.GetTable()));
		query.exec();
		while (query.next()) {
			results.push_back(query.value(0));
		}

		return results;
	}

} //namespace SynGlyphX