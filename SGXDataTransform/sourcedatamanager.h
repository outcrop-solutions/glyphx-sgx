#ifndef DATABASESERVICES_H
#define DATABASESERVICES_H

#include "sgxdatatransform_global.h"
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtSql/QSqlDatabase>
#include <unordered_set>
#include "datasourcemaps.h"
#include <boost/uuid/uuid.hpp>
#include "inputfield.h"
#include "uuid.h"

namespace SynGlyphX {

	class SGXDATATRANSFORM_EXPORT SourceDataManager
	{
	public:
		SourceDataManager();
		~SourceDataManager();

		static bool IsSQLiteDB(const QString& filename);

		static QStringList GetListOfTablesWithoutAutogeneratedTables(const QSqlDatabase& db);
		static QStringList GetListOfTablesWithoutAutogeneratedTablesInDatabaseFile(const QString& dbName);

		static QString GetQtDBType(const SynGlyphX::Datasource& datasource);
		static QStringList GetSQLiteDataTypesForFormat(const QString& format);

		static void SetIntermediateDirectory(const QString& directory);
		static const QString& GetIntermeidateDirectory();

		QVariantList RunSelectSqlQuery(const InputField& inputfield) const;
		QVariantList GetMinMaxSqlQuery(const InputField& inputfield) const;

		void AddDatabaseConnection(const Datasource& datasource, const boost::uuids::uuid& datasourceID);
		void AddDatabaseConnections(const DatasourceMaps& datasources);
		void ClearDatabaseConnection(const boost::uuids::uuid& id);
		void ClearDatabaseConnections();

	private:
		typedef std::unordered_set<boost::uuids::uuid, SynGlyphX::UUIDHash> DatabaseIDSet;
		QString GetIntermediateSQLiteDB(const FileDatasource& datasource, const QString& connectionName);
		void ClearDatabaseConnection(const DatabaseIDSet::const_iterator& id);

		DatabaseIDSet m_databaseIDs;
		static QString s_intermediateDirectory;
	};

} //namespace SynGlyphX

#endif //DATABASESERVICES_H